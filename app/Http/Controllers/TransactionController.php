<?php

namespace App\Http\Controllers;

use App\Helpers\Helpers;
use App\Models\Transaction;
use Bmatovu\MtnMomo\Exceptions\CollectionRequestException;
use Bmatovu\MtnMomo\Products\Collection;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Validator;
use Ramsey\Uuid\Uuid;

class TransactionController extends Controller
{
    public function paymentForm()
    {
        return view('transaction.transaction_form'); // TODO: Change the autogenerated stub
    }

    public static function makePayments(Request $request)
    {

        /**
         * Algorithm
         * 1- Validate input request
         * 2- initiate transaction by calling requestToPay on collection instance
         * 3- Update transactions table with request data and set the status to pending
         * 3- Send response to the user,the response can either be an error or transaction id
         * 4- use the transaction id to check transaction status
         */


       $validator = Validator::make($request->all(), [
            'tel'=>'required|numeric|min:9',
            'amount'=>'required|numeric',
            // 'callback_url'=>'required|url',
            'student_id'=>'required|numeric',
            'year_id'=>'required|numeric',
            'payment_purpose'=>'required',
            'payment_id'=>'required|numeric'
        ]);

        if ($validator->fails()) {
            # code...
            return new \Exception($validator->errors()->first(), 400);
        }

        //todo: remove try catch before pushing to life
        try {

            // return random_int(111111011010, 999999999999);
            $collection = new Collection();

            $momoTransactionId = $collection->requestToPay(Uuid::uuid4()->toString(), '237' . $request->tel, $request->amount);
            // dd($momoTransactionId);
            //save transaction
           $transaction = new Transaction();
           $transaction->payment_method = 'Mtn Mobile Money';
           $transaction->payment_purpose = $request->payment_purpose ?? '';
           $transaction->status = 'pending'; //pending,failed,completed
           $transaction->year_id = $request->year_id ?? Helpers::instance()->getCurrentAccademicYear();
           $transaction->amount = intval($request->amount);
           $transaction->reference = $request->reference ?? time().random_int(100000, 999999);
           $transaction->transaction_id = $momoTransactionId;
           $transaction->payment_id = $request->payment_id;
           $transaction->student_id = $request->student_id;
        //    $transaction->callback_url = $request->callback_url;
           $transaction->save();
        //    return $momoTransactionId;
           if($momoTransactionId != false || $momoTransactionId != null){
                $data['transaction_Id'] = $momoTransactionId;
                return response()->json($data);
            }
            else{
                return new \Exception('Operation failed. Verify your data and try again later');
            }
        } catch (\Exception $e) {
            // do {
            //     printf("\n\r%s:%d %s (%d) [%s]\n\r",
            //         $e->getFile(), $e->getLine(), $e->getMessage(), $e->getCode(), get_class($e));
            // } while ($e = $e->getPrevious());
            return $e;
        }

    }

    public function getTransactionStatus(Request $request)
    {
        try {
            
            $transaction_id = $request->transaction_id;
            $collection = new Collection();
            $transaction_status = $collection->getTransactionStatus($transaction_id);
            // dd($transaction_status);
            return response()->json($transaction_status);
        } catch (\Throwable $th) {
            //throw $th;
            return $th;
        }

    }

}
